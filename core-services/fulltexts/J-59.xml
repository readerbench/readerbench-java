<?xml version="1.0" encoding="UTF-8"?>
<document language="en">
<meta>
<genre/>
<title>J-59</title>
<authors/>
<date>10-06-2017</date>
<source/>
<complexity_level/>
<uri/>
</meta>
<body>
<p id="0">A set of jobs need to be served by a server. The server can process only one job at a time. Each job has a finite processing time and a per unit time waiting cost. Efficient ordering of this queue directs us to serve the jobs in increasing order of the ratio of per unit time waiting cost and processing time. To compensate for waiting by jobs, monetary transfers to jobs are allowed. How should the jobs share the cost equitably amongst themselves (through transfers)?</p>
<p id="1">The problem of fair division of costs among agents in a queue has many practical applications. For example, computer programs are regularly scheduled on servers, data are scheduled to be transmitted over networks, jobs are scheduled in shop-floor on machines, and queues appear in many public services (post offices, banks). Study of queueing problems has attracted economists for a long time [7, 17].</p>
<p id="2">Cost sharing is a fundamental problem in many settings on the Internet. Internet can be seen as a common resource shared by many users and the cost incured by using the resource needs to be shared in an equitable manner. The current surge in cost sharing literature from computer scientists validate this claim [8, 11, 12, 6, 24]. Internet has many settings in which our model of job scheduling appears and the agents waiting in a queue incur costs (jobs scheduled on servers, queries answered from a database, data scheduled to be transmitted over a fixed bandwidth network etc.). We hope that our analysis will give new insights on cost sharing problems of this nature.</p>
<p id="3">Recently, there has been increased interest in cost sharing methods with submodular cost functions [11, 12, 6, 24].</p>
<p id="4">While many settings do have submodular cost functions (for example, multi-cast transmission games [8]), while the cost function of our game is supermodular. Also, such literature typically does not assume budget-balance (transfers adding up to zero), while it is an inherent feature of our model.</p>
<p id="5">A recent paper by Maniquet [15] is the closest to our model and is the motivation behind our work 1 . Maniquet [15] studies a model where he assumes all processing times are unity. For such a model, he characterizes the Shapley value rule using classical fairness axioms. Chun [1] interprets the worth of a coalition of jobs in a different manner for the same model and derives a reverse rule. Chun characterizes this rule using similar fairness axioms. Chun [2] also studies the envy properties of these rules. Moulin [22, 21] studies the queueing problem from a strategic point view when per unit waiting costs are unity. Moulin introduces new concepts in the queueing settings such as splitting and merging of jobs, and ways to prevent them.</p>
<p id="6">Another stream of literature is on sequencing games, first introduced by Curiel et al. [4]. For a detailed survey, refer to Curiel et al. [3]. Curiel et al. [4] defined sequencing games similar to our model, but in which an initial ordering of jobs is given. Besides, their notion of worth of a coalition is very different from the notions studied in Maniquet [15] and Chun [1] (these are the notions used in our work too).</p>
<p id="7">The particular notion of the worth of a coalition makes the sequencing game of Curiel et al. [4] convex, whereas our game is not convex and does not assume the presence of any initial order. In summary, the focus of this stream of 1 The authors thank Fran¸cois Maniquet for several fruitful discussions. 232 research is how to share the savings in costs from the initial ordering to the optimal ordering amongst jobs (also see Hamers et al. [9], Curiel et al. [5]). Recently, Klijn and S´anchez [13, 14] considered sequencing games without any initial ordering of jobs. They take two approaches to define the worth of coalitions. One of their approaches, called the tail game, is related to the reverse rule of Chun [1]. In the tail game, jobs in a coalition are served after the jobs not in the coalition are served. Klijn and S´anchez [14] showed that the tail game is balanced. Further, they provide expressions for the Shapley value in tail game in terms of marginal vectors and reversed marginal vectors. We provide a simpler expression of the Shapley value in the tail game, generalizing the result in Chun [1]. Klijn and S´anchez [13] study the core of this game in detail.</p>
<p id="8">Strategic aspects of queueing problems have also been researched. Mitra [19] studies the first best implementation in queueing models with generic cost functions. First best implementation means that there exists an efficient mechanism in which jobs in the queue have a dominant strategy to reveal their true types and their transfers add up to zero.</p>
<p id="9">Suijs [27] shows that if waiting costs of jobs are linear then first best implementation is possible. Mitra [19] shows that among a more general class of queueing problems first best implementation is possible if and only if the cost is linear.</p>
<p id="10">For another queueing model, Mitra [18] shows that first best implementation is possible if and only if the cost function satisfies a combinatorial property and an independence property. Moulin [22, 21] studies strategic concepts such as splitting and merging in queueing problems with unit per unit waiting costs.</p>
<p id="11">The general cost sharing literature is vast and has a long history. For a good survey, we refer to [20]. From the seminal work of Shapley [25] to recent works on cost sharing in multi-cast transmission and optimization problems [8, 6, 23] this area has attracted economists, computer scientists, and operations researchers.</p>
<p id="12">Ours is the first model which considers cost sharing when both processing time and per unit waiting cost of jobs are present. We take a cooperative game theory approach and apply the classical Shapley value rule to the problem. We show that the Shapley value rule satisfies many intuitive fairness axioms. Due to two dimensional nature of our model and one dimensional nature of Maniquet"s model [15], his axioms are insufficient to characterize the Shapley value in our setting. We introduce axioms such as independece of preceding jobs" unit waiting cost and independence of following jobs" processing time. A key axiom that we introduce gives us a bound on cost share of a job in a group of jobs which have the same ratio of unit time waiting cost and processing time (these jobs can be ordered in any manner between themseleves in an efficient ordering). If such a group consists of just one job, then the axiom says that such a job should at least pay his own processing cost (i.e., the cost it would have incurred if it was the only job in the queue). If there are multiple jobs in such a group, the probability of any two jobs from such a group inflicting costs on each other is same (1 2 ) in an efficient ordering. Depending on the ordering selected, one job inflicts cost on the other. Our fairness axiom says that each job should at least bear such expected costs.</p>
<p id="13">We characterize the Shapley value rule using these fairness axioms. We also extend the envy results in [2] to our setting and discuss a class of reasonable cost sharing mechanisms.</p>
<p id="14">There are n jobs that need to be served by one server which can process only one job at a time. The set of jobs are denoted as N = {1, . . . , n}. σ : N → N is an ordering of jobs in N and σi denotes the position of job i in the ordering σ. Given an ordering σ, define Fi(σ) = {j ∈ N : σi &lt; σj} and Pi(σ) = {j ∈ N : σi &gt; σj}.</p>
<p id="15">Every job i is identified by two parameters: (pi, θi). pi is the processing time and θi is the cost per unit waiting time of job i. Thus, a queueing problem is defined by a list q = (N, p, θ) ∈ Q, where Q is the set of all possible lists. We will denote γi = θi pi . Given an ordering of jobs σ, the cost incurred by job i is given by ci(σ) = piθi + θi   j∈Pi(σ) pj.</p>
<p id="16">The total cost incurred by all jobs due to an ordering σ can be written in two ways: (i) by summing the cost incurred by every job and (ii) by summing the costs inflicted by a job on other jobs with their own processing cost.</p>
<p id="17">C(N, σ) =   i∈N ci(σ) =   i∈N piθi +   i∈N ¡θi   j∈Pi(σ) pj¢. =   i∈N piθi +   i∈N ¡pi   j∈Fi(σ) θj¢.</p>
<p id="18">An efficient ordering σ∗ is the one which minimizes the total cost incurred by all jobs. So, C(N, σ∗ ) ≤ C(N, σ) ∀ σ ∈ Σ. To achieve notational simplicity, we will write the total cost in an efficient ordering of jobs from N as C(N) whenever it is not confusing. Sometimes, we will deal with only a subset of jobs S ⊆ N. The ordering σ will then be defined on jobs in S only and we will write the total cost from an efficient ordering of jobs in S as C(S). The following lemma shows that jobs are ordered in decreasing γ in an efficient ordering. This is also known as the weighted shortest processing time rule, first introduced by Smith [26].</p>
<p id="19">Lemma 1. For any S ⊆ N, let σ∗ be an efficient ordering of jobs in S. For every i = j, i, j ∈ S, if σ∗ i &gt; σ∗ j , then γi ≤ γj.</p>
<p id="20">Proof. Assume for contradiction that the statment of the lemma is not true. This means, we can find two consecutive jobs i, j ∈ S (σ∗ i = σ∗ j + 1) such that γi &gt; γj.</p>
<p id="21">Define a new ordering σ by interchanging i and j in σ∗ .</p>
<p id="22">The costs to jobs in S \ {i, j} is not changed from σ∗ to σ.</p>
<p id="23">The difference between total costs in σ∗ and σ is given by,</p>
<p id="24">C(S, σ) − C(S, σ∗ ) = θjpi − θipj. From efficiency we get θjpi − θipj ≥ 0. This gives us γj ≥ γi, which is a contradiction.</p>
<p id="25">An allocation for q = (N, p, θ) ∈ Q has two components: an ordering σ and a transfer ti for every job i ∈ N. ti denotes the payment received by job i. Given a transfer ti and an ordering σ, the cost share of job i is defined as, πi = ci(σ) − ti = θi   j∈N:σj ≤σi pj − ti. 233 An allocation (σ, t) is efficient for q = (N, p, θ) whenever σ is an efficient ordering and £i∈N ti = 0. The set of efficient orderings of q is denoted as Σ∗ (q) and σ∗ (q) will be used to refer to a typical element of the set. The following straightforward lemma says that for two different efficient orderings, the cost share in one efficient allocation is possible to achieve in the other by appropriately modifying the transfers.</p>
<p id="26">Lemma 2. Let (σ, t) be an efficient allocation and π be the vector of cost shares of jobs from this allocation. If σ∗ = σ be an efficient ordering and t∗ i = ci(σ∗ ) − πi ∀ i ∈ N, then (σ∗ , t∗ ) is also an efficient allocation.</p>
<p id="27">Proof. Since (σ, t) is efficient, £i∈N ti = 0. This gives £i∈N πi = C(N). Since σ∗ is an efficient ordering, £i∈N ci(σ∗ ) = C(N). This means, £i∈N t∗ i = £i∈N [ci(σ∗ ) − πi] = 0. So, (σ∗ , t∗ ) is an efficient allocation.</p>
<p id="28">Depending on the transfers, the cost shares in different efficient allocations may differ. An allocation rule ψ associates with every q ∈ Q a non-empty subset ψ(q) of allocations.</p>
<p id="29">VALUE In this section, we define the coalitional cost of this game and analyze the solution proposed by the Shapley value.</p>
<p id="30">Given a queue q ∈ Q, the cost of a coalition of S ⊆ N jobs in the queue is defined as the cost incurred by jobs in S if these are the only jobs served in the queue using an efficient ordering. Formally, the cost of a coalition S ⊆ N is,</p>
<p id="31">C(S) =   i∈S   j∈S:σ∗ j ≤σ∗ i θjpj, where σ∗ = σ∗ (S) is an efficient ordering considering jobs from S only. The worth of a coalition of S jobs is just −C(S). Maniquet [15] observes another equivalent way to define the worth of a coalition is using the dual function of the cost function C(·). Other interesting ways to define the worth of a coalition in such games is discussed by Chun [1], who assume that a coalition of jobs are served after the jobs not in the coalition are served.</p>
<p id="32">The Shapley value (or cost share) of a job i is defined as,</p>
<p id="33">SVi =   S⊆N\{i} |S|!(|N| − |S| − 1)! |N|! ¡C(S∪{i})−C(S)¢. (1) The Shapley value allocation rule says that jobs are ordered using an efficient ordering and transfers are assigned to jobs such that the cost share of job i is given by Equation 1.</p>
<p id="34">Lemma 3. Let σ∗ be an efficient ordering of jobs in set N. For all i ∈ N, the Shapley value is given by,</p>
<p id="35">SVi = piθi + 1 2 ¡Li + Ri¢, where Li = θi £j∈Pi(σ∗) pj and Ri = pi £j∈Fi(σ∗) θj.</p>
<p id="36">Proof. Another way to write the Shapley value formula is the following [10],</p>
<p id="37">SVi =   S⊆N:i∈S ∆(S) |S| , where ∆(S) = C(S) if |S| = 1 and ∆(S) = C(S)−£T S ∆(T).</p>
<p id="38">This gives ∆({i}) = C({i}) = piθi ∀i ∈ N. For any i, j ∈ N with i = j, we have ∆({i, j}) = C({i, j}) − C({i}) − C({j}) = min(piθi + pjθj + pjθi, piθi + pjθj + piθj) − piθi − pjθj = min(pjθi, piθj).</p>
<p id="39">We will show by induction that ∆(S) = 0 if |S| &gt; 2. For |S| = 3, let S = {i, j, k}. Without loss of generality, assume θi pi ≥ θj pj ≥ θk pk . So, ∆(S) = C(S) − ∆({i, j}) − ∆({j, k}) − ∆({i, k})−∆({i})−∆({j})−∆({k}) = C(S)−piθj −pjθk − piθk − piθi − pjθj − pkθk = C(S) − C(S) = 0.</p>
<p id="40">Now, assume for T S, ∆(T) = 0 if |T| &gt; 2. Without loss of generality assume that σ to be the identity mapping.</p>
<p id="41">Now, ∆(S) = C(S) −   T S ∆(T) = C(S) −   i∈S   j∈S:j</p>
<p id="42">This proves that ∆(S) = 0 if |S| &gt; 2. Using the Shapley value formula now,</p>
<p id="43">SVi =   S⊆N:i∈S ∆(S) |S| = ∆({i}) + 1 2   j∈N:j=i ∆({i, j}) = piθi + 1 2 ¡  ji ∆({i, j})¢ = piθi + 1 2 ¡  ji piθj¢= piθi + 1 2 ¡Li + Ri¢.</p>
<p id="44">THE SHAPLEY VALUE In this section, we will define serveral axioms on fairness and characterize the Shapley value using them. For a given q ∈ Q, we will denote ψ(q) as the set of allocations from allocation rule ψ. Also, we will denote the cost share vector associated with an allocation rule (σ, t) as π and that with allocation rule (σ , t ) as π etc.</p>
<p id="45">We will define three types of fairness axioms: (i) related to efficiency, (ii) related to equity, and (iii) related to independence.</p>
<p id="46">Efficiency Axioms We define two types of efficiency axioms. One related to efficiency which states that an efficient ordering should be selected and the transfers of jobs should add up to zero (budget balance).</p>
<p id="47">Definition 1. An allocation rule ψ satisfies efficiency if for every q ∈ Q and (σ, t) ∈ ψ(q), (σ, t) is an efficient allocation. 234 The second axiom related to efficiency says that the allocation rule should not discriminate between two allocations which are equivalent to each other in terms of cost shares of jobs.</p>
<p id="48">Definition 2. An allocation rule ψ satisfies Pareto indifference if for every q ∈ Q, (σ, t) ∈ ψ(q), and (σ , t ) ∈ Σ(q), we have ¡πi = πi ∀ i ∈ N¢⇒ ¡(σ , t ) ∈ ψ(q)¢.</p>
<p id="49">An implication of Pareto indifference axiom and Lemma</p>
<p id="50">transfers of jobs such that it is part of an efficient rule and the cost share of a job in all these allocations are same.</p>
<p id="51">Equity Axioms How should the cost be shared between two jobs if the jobs have some kind of similarity between them? Equity axioms provide us with fairness properties which help us answer this question. We provide five such axioms. Some of these axioms (for example anonymity, equal treatment of equals) are standard in the literature, while some are new.</p>
<p id="52">We start with a well known equity axiom called anonymity.</p>
<p id="53">Denote ρ : N → N as a permutation of elements in N. Let ρ(σ, t) denote the allocation obtained by permuting elements in σ and t according to ρ. Similarly, let ρ(p, θ) denote the new list of (p, θ) obtained by permuting elements of p and θ according to ρ. Our first equity axiom states that allocation rules should be immune to such permutation of data.</p>
<p id="54">Definition 3. An allocation rule ψ satisfies anonymity if for all q ∈ Q, (σ, t) ∈ ψ(q) and every permutation ρ, we then ρ(σ, t) ∈ ψ(N, ρ(q)).</p>
<p id="55">The next equity axiom is classical in literature and says that two similar jobs should be compensated such that their cost shares are equal. This implies that if all the jobs are of same type, then jobs should equally share the total system cost.</p>
<p id="56">Definition 4. An allocation rule ψ satisfies equal treatment of equals (ETE) if for all q ∈ Q, (σ, t) ∈ ψ(q), i, j ∈ N, then ¡pi = pj; θi = θj¢⇒ ¡πi = πj¢.</p>
<p id="57">ETE directs us to share costs equally between jobs if they are of the same per unit waiting cost and processing time.</p>
<p id="58">But it is silent about the cost shares of two jobs i and j which satisfy θi pi = θj pj . We introduce a new axiom for this.</p>
<p id="59">If an efficient rule chooses σ such that σi &lt; σj for some i, j ∈ N, then job i is inflicting a cost of piθj on job j and job j is inflicting zero cost on job i. Define for some γ ≥ 0, S(γ) = {i ∈ N : γi = γ}. In an efficient rule, the elements in S(γ) can be ordered in any manner (in |S(γ)|! ways). If i, j ∈ S(γ) then we have pjθi = piθj. Probability of σi &lt; σj is 1 2 and so is the probability of σi &gt; σj. The expected cost i inflicts on j is 1 2 piθj and j inflicts on i is 1 2 pjθi. Our next fairness axiom says that i and j should each be responsible for their own processing cost and this expected cost they inflict on each other. Arguing for every pair of jobs i, j ∈ S(γ), we establish a bound on the cost share of jobs in S(γ). We impose this as an equity axiom below.</p>
<p id="60">Definition 5. An allocation rule satisfies expected cost bound (ECB) if for all q ∈ Q, (σ, t) ∈ ψ(q) with π being the resulting cost share, for any γ ≥ 0, and for every i ∈ S(γ), we have πi ≥ piθi + 1 2 ¡   j∈S(γ):σj σi piθj¢.</p>
<p id="61">The central idea behind this axiom is that of expected cost inflicted. If an allocation rule chooses multiple allocations, we can assign equal probabilities of selecting one of the allocations. In that case, the expected cost inflicted by a job i on another job j in the allocation rule can be calculated. Our axiom says that the cost share of a job should be at least its own processing cost and the total expected cost it inflicts on others. Note that the above bound poses no constraints on how the costs are shared among different groups. Also observe that if S(γ) contains just one job, ECB says that job should at least bear its own processing cost.</p>
<p id="62">A direct consequence of ECB is the following lemma.</p>
<p id="63">Lemma 4. Let ψ be an efficient rule which satisfies ECB.</p>
<p id="64">For a q ∈ Q if S(γ) = N, then for any (σ, t) ∈ ψ(q) which gives a cost share of π, πi = piθi + 1 2 ¡Li + Ri¢∀ i ∈ N.</p>
<p id="65">Proof. From ECB, we get πi ≥ piθi+1 2 ¡Li+Ri¢∀ i ∈ N.</p>
<p id="66">Assume for contradiction that there exists j ∈ N such that πj &gt; pjθj + 1 2 ¡Li + Ri¢. Using efficiency and the fact that £i∈N Li = £i∈N Ri, we get £i∈N πi = C(N) &gt; £i∈N piθi + 1 2 £i∈N ¡Li + Ri¢ = C(N). This gives us a contradiction.</p>
<p id="67">Next, we introduce an axiom about sharing the transfer of a job between a set of jobs. In particular, if the last job quits the system, then the ordering need not change.</p>
<p id="68">But the transfer to the last job needs to be shared between the other jobs. This should be done in proportion to their processing times because every job influenced the last job based on its processing time.</p>
<p id="69">Definition 6. An allocation rule ψ satisfies proportionate responsibility of p (PRp) if for all q ∈ Q, for all (σ, t) ∈ ψ(q), k ∈ N such that σk = |N|, q = (N \ {k}, p , θ ) ∈ Q, such that for all i ∈ N\{k}: θi = θi, pi = pi, there exists (σ , t ) ∈ ψ(q ) such that for all i ∈ N \ {k}: σi = σi and ti = ti + tk pi £j=k pj .</p>
<p id="70">An analogous fairness axiom results if we remove the job from the beginning of the queue. Since the presence of the first job influenced each job depending on their θ values, its transfer needs to be shared in proportion to θ values.</p>
<p id="71">Definition 7. An allocation rule ψ satisfies proportionate responsibility of θ (PRθ) if for all q ∈ Q, for all (σ, t) ∈ ψ(q), k ∈ N such that σk = 1, q = (N \{k}, p , θ ) ∈ Q, such that for all i ∈ N \{k}: θi = θi, pi = pi, there exists (σ , t ) ∈ ψ(q ) such that for all i ∈ N \ {k}: σi = σi and ti = ti + tk θi £j=k θj .</p>
<p id="72">The proportionate responsibility axioms are generalizations of equal responsibility axioms introduced by Maniquet [15]. 235 Independence Axioms The waiting cost of a job does not depend on the per unit waiting cost of its preceding jobs. Similarly, the waiting cost inflicted by a job to its following jobs is independent of the processing times of the following jobs. These independence properties should be carried over to the cost sharing rules.</p>
<p id="73">This gives us two independence axioms.</p>
<p id="74">Definition 8. An allocation rule ψ satisfies independence of preceding jobs" θ (IPJθ) if for all q = (N, p, θ), q = (N, p , θ ) ∈ Q, (σ, t) ∈ ψ(q), (σ , t ) ∈ ψ(q ), if for all i ∈ N \ {k}: θi = θi, pi = pi and γk &lt; γk, pk = pk, then for all j ∈ N such that σj &gt; σk: πj = πj, where π is the cost share in (σ, t) and π is the cost share in (σ , t ).</p>
<p id="75">Definition 9. An allocation rule ψ satisfies independence of following jobs" p (IFJp) if for all q = (N, p, θ), q = (N, p , θ ) ∈ Q, (σ, t) ∈ ψ(q), (σ , t ) ∈ ψ(q ), if for all i ∈ N \ {k}: θi = θi, pi = pi and γk &gt; γk, θk = θk, then for all j ∈ N such that σj &lt; σk: πj = πj, where π is the cost share in (σ, t) and π is the cost share in (σ , t ).</p>
<p id="76">Having stated the fairness axioms, we propose three different ways to characterize the Shapley value rule using these axioms. All our characterizations involve efficiency and ECB. But if we have IPJθ, we either need IFJp or PRp.</p>
<p id="77">Similarly if we have IFJp, we either need IPJθ or PRθ.</p>
<p id="78">Proposition 1. Any efficient rule ψ that satisfies ECB,</p>
<p id="79">IPJθ, and IFJp is a rule implied by the Shapley value rule.</p>
<p id="80">Proof. Define for any i, j ∈ N, θi j = γipj and pi j = θj γi . Assume without loss of generality that σ is an efficient ordering with σi = i ∀ i ∈ N.</p>
<p id="81">Consider the following q = (N, p , θ ) corresponding to job i with pj = pj if j ≤ i and pj = pi j if j &gt; i, θj = θi j if j &lt; i and θj = θj if j ≥ i. Observe that all jobs have the same γ: γi. By Lemma 2 and efficiency, (σ, t ) ∈ ψ(q ) for some set of transfers t . Using Lemma 4, we get cost share of i from (σ, t ) as πi = piθi + 1 2 ¡Li + Ri¢. Now, for any j &lt; i, if we change θj to θj without changing processing time, the new γ of j is γj ≥ γi. Applying IPJθ, the cost share of job i should not change. Similarly, for any job j &gt; i, if we change pj to pj without changing θj, the new γ of j is γj ≤ γi.</p>
<p id="82">Applying IFJp, the cost share of job i should not change.</p>
<p id="83">Applying this procedure for every j &lt; i with IPJθ and for every j &gt; i with IFJp, we reach q = (N, p, θ) and the payoff of i does not change from πi. Using this argument for every i ∈ N and using the expression for the Shapley value in Lemma 3, we get the Shapley value rule.</p>
<p id="84">It is possible to replace one of the independence axioms with an equity axiom on sharing the transfer of a job. This is shown in Propositions 2 and 3.</p>
<p id="85">Proposition 2. Any efficient rule ψ that satisfies ECB,</p>
<p id="86">IPJθ, and PRp is a rule implied by the Shapley value rule.</p>
<p id="87">Proof. As in the proof of Proposition 1, define θi j = γipj ∀ i, j ∈ N. Assume without loss of generality that σ is an efficient ordering with σi = i ∀ i ∈ N.</p>
<p id="88">Consider a queue with jobs in set K = {1, . . . , i, i + 1}, where i &lt; n. Define q = (K, p, θ ), where θj = θi+1 j ∀ j ∈ K. Define σj = σj ∀ j ∈ K. σ is an efficient ordering for q . By ECB and Lemma 4 the cost share of job i +</p>
<p id="89">1 2 ¡£j</p>
<p id="90">Now, we can set K = K ∪ {i + 2}. As before, we can find cost share of i + 2 in this queue as πi+2 = pi+2θi+2 + 1 2 ¡£ji piθj¢. Then, we can adjust the θ of preceding jobs of i to their original value and applying IPJθ, the payoffs of jobs i through n will not change. This gives us the Shapley values of jobs i through n. Setting i = 1, we get cost shares of all the jobs from ψ as the Shapley value.</p>
<p id="91">Proposition 3. Any efficient rule ψ that satisfies ECB,</p>
<p id="92">IFJp, and PRθ is a rule implied by the Shapley value rule.</p>
<p id="93">Proof. The proof mirrors the proof of Proposition 2. We provide a short sketch. Analogous to the proof of Proposition 2, θs are kept equal to original data and processing times are initialized to pi+1 j . This allows us to use IFJp. Also, contrast to Proposition 2, we consider K = {i, i + 1, . . . , n} and repeatedly add jobs to the beginning of the queue maintaining the same efficient ordering. So, we add the cost components of preceding jobs to the cost share of jobs in each iteration and converge to the Shapley value rule.</p>
<p id="94">The next proposition shows that the Shapley value rule satisfies all the fairness axioms discussed.</p>
<p id="95">Proposition 4. The Shapley value rule satisfies efficiency, pareto indifference, anonymity, ETE, ECB, IPJθ, IFJp, PRp, and PRθ.</p>
<p id="96">Proof. The Shapley value rule chooses an efficient ordering and by definition the payments add upto zero. So, it satisfies efficiency.</p>
<p id="97">The Shapley value assigns same cost share to a job irrespective of the efficient ordering chosen. So, it is pareto indifferent.</p>
<p id="98">The Shapley value is anonymous because the particular index of a job does not effect his ordering or cost share.</p>
<p id="99">For ETE, consider two jobs i, j ∈ N such that pi = pj and θi = θj. Without loss of generality assume the efficient ordering to be 1, . . . , i, . . . , j, . . . , n. Now, the Shapley value of job i is 236 SVi = piθi + 1 2 ¡Li + Ri¢(From Lemma 3) = pjθj + 1 2 ¡Lj + Rj¢− 1 2 ¡Li − Lj + Ri − Rj¢ = SVj − 1 2 ¡   i</p>
<p id="100">The Shapley value satisfies ECB by its expression in Lemma</p>
<p id="101">Consider any job i, in an efficient ordering σ, if we increase the value of γj for some j = i such that σj &gt; σi, then the set Pi ( preceding jobs) does not change in the new efficient ordering. If γj is changed such that pj remains the same, then the expression £j∈Pi θipj is unchanged. If (p, θ) values of no other jobs are changed, then the Shapley value is unchanged by increasing γj for some j ∈ Pi while keeping pj unchanged. Thus, the Shapley value rule satisfies IPJθ.</p>
<p id="102">An analogous argument shows that the Shapley value rule satisfies IFJp.</p>
<p id="103">For PRp, assume without loss of generality that jobs are ordered 1, . . . , n in an efficient ordering. Denote the transfer of job i = n due to the Shapley value with set of jobs N and set of jobs N \ {n} as ti and ti respectively. Transfer of last job is tn = 1 2 θn £ji θj¢ = 1 2 ¡θi   ji:j=n θj¢− 1 2 piθn = ti − 1 2 θn   j</p>
<p id="104">A similar argument shows that the Shapley value rule satisfies PRθ.</p>
<p id="105">These series of propositions lead us to our main result.</p>
<p id="106">Theorem 1. Let ψ be an allocation rule. The following statements are equivalent: 1) For each q ∈ Q, ψ(q) selects all the allocation assigning jobs cost shares implied by the Shapley value. 2) ψ satisfies efficiency, ECB, IFJp, and IPJθ. 3) ψ satisfies efficiency, ECB, IFJp, and PRθ. 4) ψ satisfies efficiency, ECB, PRp, and IPJθ.</p>
<p id="107">Proof. The proof follows from Propositions 1, 2, 3, and</p>
<p id="108">Mechanisms In this section, we will define a reasonable class of cost sharing mechanisms. We will show how these reasonable mechanisms lead to the Shapley value mechanism.</p>
<p id="109">Definition 10. An allocation rule ψ is reasonable if for all q ∈ Q and (σ, t) ∈ ψ(q) we have for all i ∈ N, ti = α ¡θi   j∈Pi(σ) pj − pi   j∈Fi(σ) θj¢∀ i ∈ N, where 0 ≤ α ≤ 1.</p>
<p id="110">The reasonable cost sharing mechanism says that every job should be paid a constant fraction of the difference between the waiting cost he incurs and the waiting cost he inflicts on other jobs. If α = 0, then every job bears its own cost. If α = 1, then every job gets compensated for its waiting cost but compensates others for the cost he inflicts on others. The Shapley value rule comes as a result of ETE as shown in the following proposition.</p>
<p id="111">Proposition 5. Any efficient and reasonable allocation rule ψ that satisfies ETE is a rule implied by the Shapley value rule.</p>
<p id="112">Proof. Consider a q ∈ Q in which pi = pj and θi = θj.</p>
<p id="113">Let (σ, t) ∈ ψ(q) and π be the resulting cost shares. From ETE, we get, πi = πj ⇒ ci(σ) − ti = cj(σ) − tj ⇒ piθi + (1 − α)Li + αRi = pjθj + (1 − α)Lj + αRj (Since ψ is efficient and reasonable) ⇒ (1 − α)(Li − Lj) = α(Rj − Ri) (Using pi = pj, θi = θj) ⇒ 1 − α = α (Using Li − Lj = Rj − Ri = 0) ⇒ α = 1 2 .</p>
<p id="114">This gives us the Shapley value rule by Lemma 3.</p>
<p id="115">Chun [2] discusses a fariness condition called no-envy for the case when processing times of all jobs are unity.</p>
<p id="116">Definition 11. An allocation rule satisfies no-envy if for all q ∈ Q, (σ, t) ∈ ψ(q), and i, j ∈ N, we have πi ≤ ci(σij ) − tj, where π is the cost share from allocation rule (σ, t) and σij is the ordering obtaining by swapping i and j.</p>
<p id="117">From the result in [2], the Shapley value rule does not satisfy no-envy in our model also. To overcome this, Chun [2] introduces the notion of adjusted no-envy, which he shows is satisfied in the Shapley value rule when processing times of all jobs are unity. Here, we show that adjusted envy continues to hold in the Shapley value rule in our model (when processing times need not be unity).</p>
<p id="118">As before denote σij be an ordering where the position of i and j is swapped from an ordering σ. For adjusted noenvy, if (σ, t) is an allocation for some q ∈ Q, let tij be the 237 transfer of job i when the transfer of i is calculated with respect to ordering σij . Observe that an allocation may not allow for calculation of tij . For example, if ψ is efficient, then tij cannot be calculated if σij is also not efficient. For simplicity, we state the definition of adjusted no-envy to apply to all such rules.</p>
<p id="119">Definition 12. An allocation rule satisfies adjusted noenvy if for all q ∈ Q, (σ, t) ∈ ψ(q), and i, j ∈ N, we have πi ≤ ci(σij ) − tij i .</p>
<p id="120">Proposition 6. The Shapley value rule satisfies adjusted no-envy.</p>
<p id="121">Proof. Without loss of generality, assume efficient ordering of jobs is: 1, . . . , n. Consider two jobs i and i + k.</p>
<p id="122">From Lemma 3,</p>
<p id="123">SVi = piθi + 1 2 ¡  ji θjpi¢.</p>
<p id="124">Let ˆπi be the cost share of i due to adjusted transfer tii+k i in the ordering σii+k . ˆπi = ci(σii+k ) − tii+k i = piθi + 1 2 ¡  ji θjpi − θi+kpi −   i</p>
<p id="125">We studied the problem of sharing costs for a job scheduling problem on a single server, when jobs have processing times and unit time waiting costs. We took a cooperative game theory approach and show that the famous the Shapley value rule satisfies many nice fairness properties. We characterized the Shapley value rule using different intuitive fairness axioms.</p>
<p id="126">In future, we plan to further simplify some of the fairness axioms. Some initial simplifications already appear in [16], where we provide an alternative axiom to ECB and also discuss the implication of transfers between jobs (in stead of transfers from jobs to a central server). We also plan to look at cost sharing mechanisms other than the Shapley value.</p>
<p id="127">Investigating the strategic power of jobs in such mechanisms is another line of future research.</p>
</body>
</document>
