<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Dialog team="0">
            <Participants>
                <Person nickname="1387183170"/>
                <Person nickname="120635"/>
                <Person nickname="120635"/>
                <Person nickname="131162"/>
                <Person nickname="5157234"/>
            </Participants>
            <Body>
                <Turn nickname="120635">
                    <Utterance genid="1" refid="0" time="1387183170">"It turns out that it is not difficult to solve this quiz and to model similar social networks using a database like MS Access .. or, more generally, one that supports SQL. And this in itself is relevant to our course because these sorts of tools are now being widely used in ""big data,"" particularly where speed and parallel processing become important. (Think Pregel and Hadoop and Dremel.) I started out with the one data table we were given and created several basic queries (one for all participants, one for posters, another for responses (involving the response-to field), and another for distinct connections, and another that serially strung together copies of the connections query to measure ""hops distance"" - out to 4 or 5 hops, anyway. Access allows easy entry of criteria that each field has to meet and SQL provides the ""distinct"" option to return only unique records (and not duplicates), etc. I was also able to verify most of those results using RapidMiner (although it would not read an Access 2007 .accdb database ...). And I did like that ""transisitions graph"" module, especially if you give it a data table that just contains the unique (non-directional) links between pairs of nodes (e.g., Poster A and Poster B ... all the links you counted for Question 2). That makes it easy to explore. Social networking and graphs are a big deal nowadays and this assignment was a good introduction toward thinking about implementing these techniques in research. </Utterance>
                </Turn>
                <Turn nickname="120635">
                    <Utterance genid="2" refid="1" time="1387319338">"Hi, Emanuel. Yes, it does. And you can also use MS Query (built-into Excel ... see Data: Import External Data: New Database Query options). Here's a link on how to do that: </Utterance>
                </Turn>
                <Turn nickname="120635">
                    <Utterance genid="3" refid="1" time="1387839500">"Ha, yes, well, Jamie .. I'd think if ORACLE couldn't do this rather well ... places like FaceBook, etc., would sure have problems! Good work! </Utterance>
                </Turn>
                <Turn nickname="131162">
                    <Utterance genid="4" refid="1" time="1387887347">"you are right.. It was a little tricky. I had to download ""SqlDeveloper"" app (free) and then I was able to load the excel file to oracle.</Utterance>
                </Turn>
                <Turn nickname="5157234">
                    <Utterance genid="5" refid="1" time="1387945578">I also used Oracle and added an extra column after the data load. as jaime mentioned The question 02 and 05 were a little bit more tricky. The other were quite fine</Utterance>
                </Turn>
                <Turn nickname="475014">
                    <Utterance genid="6" refid="5" time="1387317784">"Excel also has a remove duplicates function, just in case somebody can't have access or sql tools.</Utterance>
                </Turn>
                <Turn nickname="1802444">
                    <Utterance genid="7" refid="6" time="1387502292">"Warren, Can you tell me more about the queries you wrote to make hops? I am eager to know how you did them. If you can post in some query examples to make hops (say two hops), it would be great! I never thought of query as a option to solve this.... sigh! </Utterance>
                </Turn>
                <Turn nickname="120635">
                    <Utterance genid="8" refid="7" time="1387509398">"Yes, I think so. There are many ways to do this. I experimented around a bit .. so this may seem an odd solution process. First I imported the data as a table with 198 records. I completely ignored thread and used Poster and PostID as the primary keys to the table. Then I created a simple query called POSTERS with fields from table DATA for PostID and Poster, both acending. (I did this just to keep things clean .. I could have used DATA as it is.) It has 198 records. Then I created a query called RESPONSES. It was built again from table DATA and linked to query POSTERS by a directional link from DATA.Response-To to POSTERS.PostID. (I am using the MS Access graphic query builder.) It has 147 records. RESPONSES has four fields: the first is renamed responder:[data].[poster]. The second is DATA.PostID. The third is DATA.Response-To (with a criterion IS NOT NULL) and the fourth is POSTERS.Poster with a criterion that this field's value can NOT EQUAL the value in DATA.Poster. (Picture 1 below.) (This gets rid of some duplicates - replying to one's own post.) Then I created another simple query called CONNECTIONS with just the fields RESPONSES.Responder and RESPONSES.Poster and added the ""distinct"" option to the SQL Select statement. This query has 132 records. (Now this was sort of a doing-as-thinking process. At this point I had not noticed that there were still duplicate non-directional links here (Poster A -&gt; Poster B and also reverse links Poster B -&gt; Poster A. Later I found and got rid of these .. but they are there in this explanation and cause no real problem.) So now I have all of the first hops, from Poster A to Poster B (+ some reverses). And I created a fourth query which is directed toward your question above. As you can see in Picture 2, four copies of the CONNECTIONS query are chained together, from responder to poster. The rows in the query result begin with a poster linked to by some responder. That is hop1. Then that responder is linked to by other posters and their responders are hop2. Then those responders are linked to still other posters whose responders are hop3, and so on. In addition a chain of criteria are placed on the 2nd to the Nth hop. For instance, after hop1 comes hop2. But the hop2:[connections_1].[responder] must be different than either of the two hop1 poster and responder. And the hop3:[connections_2].[responder] must be different than either of those in hop1 or the new responder in hop2. Etc. I sorted every field ascending. Going out 4 hops produced 1920 records. You can see how many hops it takes to go from Poster to Poster in Pic3. (Sorry these are so big but the resolution is not much if smaller.) Actually you can just take the N=132 RESPONSES query, delete the duplicates, name field 1 Poster A and field 2 Poster B, and that makes a nice input into RapidMiner for the transitions graph process. BTW: This would have been easy and cleaner to do in Python as well using the sqlite3 package (which is a free download). Hope this was helpful. Pic1: Pic2: Pic3: </Utterance>
                </Turn>
                <Turn nickname="131162">
                    <Utterance genid="9" refid="8" time="1387817419">"HI All.. I have been using ORACLE for to that. I also load a table with the given information and add an additional column (post_to) where I include the ""poster"" who gave an answer. After that everything seems to be easy.</Utterance>
                </Turn>
                <Turn nickname="1787288">
                    <Utterance genid="10" refid="9" time="1387945019">"Dear All, Great to learn about other methods used to solve here. The sharing is much appreciated. I will try the MS-Access method later-I didn't think of that. In the spirit of sharing, I'd like to share how I did mine. I did quite a bit of research because wanted to do it in other tools. This assignment actually took me many days to finally solve. But the good thing is along the process, I learned different tools: R has an SNA and iGraph package (see ). It has some really good step-by-step, easy to follow. But the R syntax on the graphs-oh! my, I'd never remember those. Rapidminer - I struggled here with not much luck (please share how later when quiz deadline passes) so I moved on to ""google"" some other methods NodeXL graph - Freeware and bolted-on to Excel. It's got all the graph metrics pre-calculated. Except I did get stuck on question #1 (until I remembered to do this by hand using the good 'ol formula for combinations-thanks Statrek.com). I still don't get #2 (perhaps someone can post how this was solved when the quiz deadline passes) Gephi - Freeware and very similar to NodeXL, but fancier Thank you everybody. </Utterance>
                </Turn>
            </Body>
</Dialog>        
